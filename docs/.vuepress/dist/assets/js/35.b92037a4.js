(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{394:function(a,e,s){"use strict";s.r(e);var t=s(26),r=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"kubernetes核心技术pod"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes核心技术pod"}},[a._v("#")]),a._v(" Kubernetes核心技术Pod")]),a._v(" "),s("h2",{attrs:{id:"pod概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pod概述"}},[a._v("#")]),a._v(" Pod概述")]),a._v(" "),s("p",[a._v("Pod是K8S系统中可以创建和管理的最小单元，是资源对象模型中由用户创建或部署的最小资源对象模型，也是在K8S上运行容器化应用的资源对象，其它的资源对象都是用来支撑或者扩展Pod对象功能的，比如控制器对象是用来管控Pod对象的，Service或者Ingress资源对象是用来暴露Pod引用对象的，PersistentVolume资源对象是用来为Pod提供存储等等，K8S不会直接处理容器，而是Pod，Pod是由一个或多个container组成。")]),a._v(" "),s("p",[a._v("Pod是Kubernetes的最重要概念，每一个Pod都有一个特殊的被称为 “根容器”的Pause容器。Pause容器对应的镜像属于Kubernetes平台的一部分，除了Pause容器，每个Pod还包含一个或多个紧密相关的用户业务容器。")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114185528215.png",alt:"image-20201114185528215"}})]),a._v(" "),s("h3",{attrs:{id:"pod基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pod基本概念"}},[a._v("#")]),a._v(" Pod基本概念")]),a._v(" "),s("ul",[s("li",[a._v("最小部署的单元")]),a._v(" "),s("li",[a._v("Pod里面是由一个或多个容器组成【一组容器的集合】")]),a._v(" "),s("li",[a._v("一个pod中的容器是共享网络命名空间")]),a._v(" "),s("li",[a._v("Pod是短暂的")]),a._v(" "),s("li",[a._v("每个Pod包含一个或多个紧密相关的用户业务容器")])]),a._v(" "),s("h3",{attrs:{id:"pod存在的意义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pod存在的意义"}},[a._v("#")]),a._v(" Pod存在的意义")]),a._v(" "),s("ul",[s("li",[a._v("创建容器使用docker，一个docker对应一个容器，一个容器运行一个应用进程")]),a._v(" "),s("li",[a._v("Pod是多进程设计，运用多个应用程序，也就是一个Pod里面有多个容器，而一个容器里面运行一个应用程序")])]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114190018948.png",alt:"image-20201114190018948"}})]),a._v(" "),s("ul",[s("li",[a._v("Pod的存在是为了亲密性应用\n"),s("ul",[s("li",[a._v("两个应用之间进行交互")]),a._v(" "),s("li",[a._v("网络之间的调用【通过127.0.0.1 或 socket】")]),a._v(" "),s("li",[a._v("两个应用之间需要频繁调用")])])])]),a._v(" "),s("p",[a._v("Pod是在K8S集群中运行部署应用或服务的最小单元，它是可以支持多容器的。Pod的设计理念是支持多个容器在一个Pod中共享网络地址和文件系统，可以通过进程间通信和文件共享这种简单高效的方式组合完成服务。同时Pod对多容器的支持是K8S中最基础的设计理念。在生产环境中，通常是由不同的团队各自开发构建自己的容器镜像，在部署的时候组合成一个微服务对外提供服务。")]),a._v(" "),s("p",[a._v("Pod是K8S集群中所有业务类型的基础，可以把Pod看作运行在K8S集群上的小机器人，不同类型的业务就需要不同类型的小机器人去执行。目前K8S的业务主要可以分为以下几种")]),a._v(" "),s("ul",[s("li",[a._v("长期伺服型：long-running")]),a._v(" "),s("li",[a._v("批处理型：batch")]),a._v(" "),s("li",[a._v("节点后台支撑型：node-daemon")]),a._v(" "),s("li",[a._v("有状态应用型：stateful application")])]),a._v(" "),s("p",[a._v("上述的几种类型，分别对应的小机器人控制器为：Deployment、Job、DaemonSet 和 StatefulSet  (后面将介绍控制器)")]),a._v(" "),s("h2",{attrs:{id:"pod实现机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pod实现机制"}},[a._v("#")]),a._v(" Pod实现机制")]),a._v(" "),s("p",[a._v("主要有以下两大机制")]),a._v(" "),s("ul",[s("li",[a._v("共享网络")]),a._v(" "),s("li",[a._v("共享存储")])]),a._v(" "),s("h3",{attrs:{id:"共享网络"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#共享网络"}},[a._v("#")]),a._v(" 共享网络")]),a._v(" "),s("p",[a._v("容器本身之间相互隔离的，一般是通过 "),s("strong",[a._v("namespace")]),a._v(" 和 "),s("strong",[a._v("group")]),a._v(" 进行隔离，那么Pod里面的容器如何实现通信？")]),a._v(" "),s("ul",[s("li",[a._v("首先需要满足前提条件，也就是容器都在同一个"),s("strong",[a._v("namespace")]),a._v("之间")])]),a._v(" "),s("p",[a._v("关于Pod实现原理，首先会在Pod会创建一个根容器： "),s("code",[a._v("pause容器")]),a._v("，然后我们在创建业务容器 【nginx，redis 等】，在我们创建业务容器的时候，会把它添加到 "),s("code",[a._v("info容器")]),a._v(" 中")]),a._v(" "),s("p",[a._v("而在 "),s("code",[a._v("info容器")]),a._v(" 中会独立出  ip地址，mac地址，port 等信息，然后实现网络的共享")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114190913859.png",alt:"image-20201114190913859"}})]),a._v(" "),s("p",[a._v("完整步骤如下")]),a._v(" "),s("ul",[s("li",[a._v("通过 Pause 容器，把其它业务容器加入到Pause容器里，让所有业务容器在同一个名称空间中，可以实现网络共享")])]),a._v(" "),s("h3",{attrs:{id:"共享存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#共享存储"}},[a._v("#")]),a._v(" 共享存储")]),a._v(" "),s("p",[a._v("Pod持久化数据，专门存储到某个地方中")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114193124160.png",alt:"image-20201114193124160"}})]),a._v(" "),s("p",[a._v("使用 Volumn数据卷进行共享存储，案例如下所示")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114193341993.png",alt:"image-20201114193341993"}})]),a._v(" "),s("h2",{attrs:{id:"pod镜像拉取策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pod镜像拉取策略"}},[a._v("#")]),a._v(" Pod镜像拉取策略")]),a._v(" "),s("p",[a._v("我们以具体实例来说，拉取策略就是 "),s("code",[a._v("imagePullPolicy")])]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114193605230.png",alt:"image-20201114193605230"}})]),a._v(" "),s("p",[a._v("拉取策略主要分为了以下几种")]),a._v(" "),s("ul",[s("li",[a._v("IfNotPresent：默认值，镜像在宿主机上不存在才拉取")]),a._v(" "),s("li",[a._v("Always：每次创建Pod都会重新拉取一次镜像")]),a._v(" "),s("li",[a._v("Never：Pod永远不会主动拉取这个镜像")])]),a._v(" "),s("h2",{attrs:{id:"pod资源限制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pod资源限制"}},[a._v("#")]),a._v(" Pod资源限制")]),a._v(" "),s("p",[a._v("也就是我们Pod在进行调度的时候，可以对调度的资源进行限制，例如我们限制 Pod调度是使用的资源是 2C4G，那么在调度对应的node节点时，只会占用对应的资源，对于不满足资源的节点，将不会进行调度")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114194057920.png",alt:"image-20201114194057920"}})]),a._v(" "),s("h3",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[a._v("#")]),a._v(" 示例")]),a._v(" "),s("p",[a._v("我们在下面的地方进行资源的限制")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114194245517.png",alt:"image-20201114194245517"}})]),a._v(" "),s("p",[a._v("这里分了两个部分")]),a._v(" "),s("ul",[s("li",[a._v("request：表示调度所需的资源")]),a._v(" "),s("li",[a._v("limits：表示最大所占用的资源")])]),a._v(" "),s("h2",{attrs:{id:"pod重启机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pod重启机制"}},[a._v("#")]),a._v(" Pod重启机制")]),a._v(" "),s("p",[a._v("因为Pod中包含了很多个容器，假设某个容器出现问题了，那么就会触发Pod重启机制")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114194722125.png",alt:"image-20201114194722125"}})]),a._v(" "),s("p",[a._v("重启策略主要分为以下三种")]),a._v(" "),s("ul",[s("li",[a._v("Always：当容器终止退出后，总是重启容器，默认策略 【nginx等，需要不断提供服务】")]),a._v(" "),s("li",[a._v("OnFailure：当容器异常退出（退出状态码非0）时，才重启容器。")]),a._v(" "),s("li",[a._v("Never：当容器终止退出，从不重启容器 【批量任务】")])]),a._v(" "),s("h2",{attrs:{id:"pod健康检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pod健康检查"}},[a._v("#")]),a._v(" Pod健康检查")]),a._v(" "),s("p",[a._v("通过容器检查，原来我们使用下面的命令来检查")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl get pod\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("但是有的时候，程序可能出现了 "),s("strong",[a._v("Java")]),a._v(" 堆内存溢出，程序还在运行，但是不能对外提供服务了，这个时候就不能通过 容器检查来判断服务是否可用了")]),a._v(" "),s("p",[a._v("这个时候就可以使用应用层面的检查")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 存活检查，如果检查失败，将杀死容器，根据Pod的restartPolicy【重启策略】来操作")]),a._v("\nlivenessProbe\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 就绪检查，如果检查失败，Kubernetes会把Pod从Service endpoints中剔除")]),a._v("\nreadinessProbe\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[s("img",{attrs:{src:"images/image-20201114195807564.png",alt:"image-20201114195807564"}})]),a._v(" "),s("p",[a._v("Probe支持以下三种检查方式")]),a._v(" "),s("ul",[s("li",[a._v("http Get：发送HTTP请求，返回200 - 400 范围状态码为成功")]),a._v(" "),s("li",[a._v("exec：执行Shell命令返回状态码是0为成功")]),a._v(" "),s("li",[a._v("tcpSocket：发起TCP Socket建立成功")])]),a._v(" "),s("h2",{attrs:{id:"pod调度策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pod调度策略"}},[a._v("#")]),a._v(" Pod调度策略")]),a._v(" "),s("h3",{attrs:{id:"创建pod流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建pod流程"}},[a._v("#")]),a._v(" 创建Pod流程")]),a._v(" "),s("ul",[s("li",[a._v("首先创建一个pod，然后创建一个API Server 和 Etcd【把创建出来的信息存储在etcd中】")]),a._v(" "),s("li",[a._v("然后创建 Scheduler，监控API Server是否有新的Pod，如果有的话，会通过调度算法，把pod调度某个node上")]),a._v(" "),s("li",[a._v("在node节点，会通过 "),s("code",[a._v("kubelet -- apiserver")]),a._v(" 读取etcd 拿到分配在当前node节点上的pod，然后通过docker创建容器")])]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114201611308.png",alt:"image-20201114201611308"}})]),a._v(" "),s("h3",{attrs:{id:"影响pod调度的属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#影响pod调度的属性"}},[a._v("#")]),a._v(" 影响Pod调度的属性")]),a._v(" "),s("p",[a._v("Pod资源限制对Pod的调度会有影响")]),a._v(" "),s("h4",{attrs:{id:"根据request找到足够node节点进行调度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#根据request找到足够node节点进行调度"}},[a._v("#")]),a._v(" 根据request找到足够node节点进行调度")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114194245517.png",alt:"image-20201114194245517"}})]),a._v(" "),s("h4",{attrs:{id:"节点选择器标签影响pod调度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#节点选择器标签影响pod调度"}},[a._v("#")]),a._v(" 节点选择器标签影响Pod调度")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114202456151.png",alt:"image-20201114202456151"}})]),a._v(" "),s("p",[a._v("关于节点选择器，其实就是有两个环境，然后环境之间所用的资源配置不同")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114202643905.png",alt:"image-20201114202643905"}})]),a._v(" "),s("p",[a._v("我们可以通过以下命令，给我们的节点新增标签，然后节点选择器就会进行调度了")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl label node node1 "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("env_role")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("prod\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h4",{attrs:{id:"节点亲和性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#节点亲和性"}},[a._v("#")]),a._v(" 节点亲和性")]),a._v(" "),s("p",[a._v("节点亲和性 "),s("strong",[a._v("nodeAffinity")]),a._v(" 和 之前nodeSelector 基本一样的，根据节点上标签约束来决定Pod调度到哪些节点上")]),a._v(" "),s("ul",[s("li",[a._v("硬亲和性：约束条件必须满足")]),a._v(" "),s("li",[a._v("软亲和性：尝试满足，不保证")])]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114203433939.png",alt:"image-20201114203433939"}})]),a._v(" "),s("p",[a._v("支持常用操作符：in、NotIn、Exists、Gt、Lt、DoesNotExists")]),a._v(" "),s("p",[a._v("反亲和性：就是和亲和性刚刚相反，如 NotIn、DoesNotExists等")]),a._v(" "),s("h2",{attrs:{id:"污点和污点容忍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#污点和污点容忍"}},[a._v("#")]),a._v(" 污点和污点容忍")]),a._v(" "),s("h3",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[a._v("#")]),a._v(" 概述")]),a._v(" "),s("p",[a._v("nodeSelector 和 NodeAffinity，都是Prod调度到某些节点上，属于Pod的属性，是在调度的时候实现的。")]),a._v(" "),s("p",[a._v("Taint 污点：节点不做普通分配调度，是节点属性")]),a._v(" "),s("h3",{attrs:{id:"场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[a._v("#")]),a._v(" 场景")]),a._v(" "),s("ul",[s("li",[a._v("专用节点【限制ip】")]),a._v(" "),s("li",[a._v("配置特定硬件的节点【固态硬盘】")]),a._v(" "),s("li",[a._v("基于Taint驱逐【在node1不放，在node2放】")])]),a._v(" "),s("h3",{attrs:{id:"查看污点情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看污点情况"}},[a._v("#")]),a._v(" 查看污点情况")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl describe node k8smaster "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" Taint\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"images/image-20201114204124819.png",alt:"image-20201114204124819"}})]),a._v(" "),s("p",[a._v("污点值有三个")]),a._v(" "),s("ul",[s("li",[a._v("NoSchedule：一定不被调度")]),a._v(" "),s("li",[a._v("PreferNoSchedule：尽量不被调度【也有被调度的几率】")]),a._v(" "),s("li",[a._v("NoExecute：不会调度，并且还会驱逐Node已有Pod")])]),a._v(" "),s("h3",{attrs:{id:"未节点添加污点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#未节点添加污点"}},[a._v("#")]),a._v(" 未节点添加污点")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl taint node "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("key")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("value:污点的三个值\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("举例：")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl taint node k8snode1 "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("env_role")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("yes:NoSchedule\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"删除污点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除污点"}},[a._v("#")]),a._v(" 删除污点")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl taint node k8snode1 env_role:NoSchedule-\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"images/image-20201114210022883.png",alt:"image-20201114210022883"}})]),a._v(" "),s("h3",{attrs:{id:"演示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#演示"}},[a._v("#")]),a._v(" 演示")]),a._v(" "),s("p",[a._v("我们现在创建多个Pod，查看最后分配到Node上的情况")]),a._v(" "),s("p",[a._v("首先我们创建一个 nginx 的pod")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl create deployment web --image"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("nginx\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("然后使用命令查看")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl get pods -o wide\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"images/image-20201114204917548.png",alt:"image-20201114204917548"}})]),a._v(" "),s("p",[a._v("我们可以非常明显的看到，这个Pod已经被分配到 k8snode1 节点上了")]),a._v(" "),s("p",[a._v("下面我们把pod复制5份，在查看情况pod情况")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl scale deployment web --replicas"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("我们可以发现，因为master节点存在污点的情况，所以节点都被分配到了 node1 和 node2节点上")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114205135282.png",alt:"image-20201114205135282"}})]),a._v(" "),s("p",[a._v("我们可以使用下面命令，把刚刚我们创建的pod都删除")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl delete deployment web\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("现在给了更好的演示污点的用法，我们现在给 node1节点打上污点")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl taint node k8snode1 "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("env_role")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("yes:NoSchedule\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("然后我们查看污点是否成功添加")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl describe node k8snode1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" Taint\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"images/image-20201114205516154.png",alt:"image-20201114205516154"}})]),a._v(" "),s("p",[a._v("然后我们在创建一个 pod")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建nginx pod")]),a._v("\nkubectl create deployment web --image"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("nginx\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 复制五次")]),a._v("\nkubectl scale deployment web --replicas"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("然后我们在进行查看")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl get pods -o wide\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("我们能够看到现在所有的pod都被分配到了 k8snode2上，因为刚刚我们给node1节点设置了污点")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114205654867.png",alt:"image-20201114205654867"}})]),a._v(" "),s("p",[a._v("最后我们可以删除刚刚添加的污点")]),a._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("kubectl taint node k8snode1 env_role:NoSchedule-\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"污点容忍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#污点容忍"}},[a._v("#")]),a._v(" 污点容忍")]),a._v(" "),s("p",[a._v("污点容忍就是某个节点可能被调度，也可能不被调度")]),a._v(" "),s("p",[s("img",{attrs:{src:"images/image-20201114210146123.png",alt:"image-20201114210146123"}})])])}),[],!1,null,null,null);e.default=r.exports}}]);