(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{412:function(v,_,t){"use strict";t.r(_);var l=t(26),s=Object(l.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"什么是设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是设计模式"}},[v._v("#")]),v._v(" 什么是设计模式")]),v._v(" "),t("p",[v._v("设计模式不是语法规定，而是解决特定问题的一系列套路，提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案。")]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("GoF 23")]),v._v(" "),t("p",[v._v("GoF四人帮在《设计模式：可复用面向对象软件的基础》书中提出的23种设计模式")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("提高思维能力和设计能力")])]),v._v(" "),t("li",[t("p",[v._v("程序设计更加标准化、软件开发效率提高")])]),v._v(" "),t("li",[t("p",[v._v("使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强")]),v._v(" "),t("hr")])]),v._v(" "),t("h2",{attrs:{id:"gof23"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gof23"}},[v._v("#")]),v._v(" GoF23")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("创建型模式")]),v._v(" "),t("ul",[t("li",[v._v("单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式")])])]),v._v(" "),t("li",[t("p",[v._v("结构型模式")]),v._v(" "),t("ul",[t("li",[v._v("适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式")])])]),v._v(" "),t("li",[t("p",[v._v("行为型模式")]),v._v(" "),t("ul",[t("li",[v._v("模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式")])])])]),v._v(" "),t("h2",{attrs:{id:"oop七大原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#oop七大原则"}},[v._v("#")]),v._v(" OOP七大原则")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("开闭原则：对扩展开放，对修改关闭")])]),v._v(" "),t("li",[t("p",[v._v("里氏替换原则：继承必须确保超类所拥有的性质再子类中仍然成立")])]),v._v(" "),t("li",[t("p",[v._v("依赖倒置原则：要面向接口编程，不要面向实现编程")])]),v._v(" "),t("li",[t("p",[v._v("单一职责原则：控制类的粒度大小、将对象解耦、提高内聚性")])]),v._v(" "),t("li",[t("p",[v._v("接口隔离原则：要为各个类建立他们需要的专用接口")])]),v._v(" "),t("li",[t("p",[v._v("迪米特法则：只与你的直接朋友交谈，不跟“陌生人”说话")])]),v._v(" "),t("li",[t("p",[v._v("合成复用原则：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现")])])])])}),[],!1,null,null,null);_.default=s.exports}}]);